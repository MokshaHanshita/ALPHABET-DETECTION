import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler 
import cv2
from PIL import Image 
import PIL.ImageOps
import pandas as pd

X=np.load('image.npz')['arr_0']
y=pd.read_csv("labels.csv")["labels"]
print(pd.Series(y).value_counts())
classes = ["A",'B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
nclasses=len(classes)

model=LogisticRegression(solver='saga',multi_class='multinomial')

x_train,x_test,y_train,y_test = train_test_split(X,y,random_state=42,train_size=7500,test_size=2500)

sd=StandardScaler()
x_train=sd.fit_transform(x_train)
x_test=sd.transform(x_test)

model.fit(x_train,y_train)

prediction=model.predict(x_test)

accuracy=accuracy_score(y_test,prediction)
print(accuracy)

cap=cv2.VideoCapture(0)
while cap.isOpened():
    ret,frame=cap.read()

    grey=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)

    height,width=grey.shape

    upper_left=(int(width/2-100),int(height/2-100))
    bottom_right=(int(width/2+100),int(height/2+100))

    cv2.rectangle(grey,upper_left,bottom_right,(0,0,0),2)

    roi=grey[upper_left[1]:bottom_right[1],upper_left[0]:bottom_right[0]]

    im_pil=Image.fromarray(roi)
    image_bw=im_pil.convert('L')

    image_resize=image_bw.resize((22,30),Image.ANTIALIAS)

    image_inverted=PIL.ImageOps.invert(image_resize)

    image_scaled=sd.transform(np.array(image_inverted).reshape(1,660))

    prediction=model.predict(image_scaled)

    print("predicted alphabet is ",prediction)

    cv2.imshow("ALpa",grey)

    cv2.waitKey(1)
    